<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huahai&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-26T10:03:27.484Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>huahai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript常用的原生数组方法</title>
    <link href="http://yoursite.com/2018/05/26/javascript%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8E%9F%E7%94%9F%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/26/javascript常用的原生数组方法/</id>
    <published>2018-05-26T10:01:01.000Z</published>
    <updated>2018-05-26T10:03:27.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript常用的原生数组方法"><a href="#javascript常用的原生数组方法" class="headerlink" title="javascript常用的原生数组方法"></a>javascript常用的原生数组方法</h1><h2 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h2><blockquote><p>方法：concat()</p><p>描述：连接2个灬更多的数组 并放回结果</p><p>语法：arrayObject.concat(arrayX,arrayX,……,arrayX)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3],</span><br><span class="line">    b=[2,3,4];</span><br><span class="line">console.log(a.concat(4,5));//1,2,3,4,5</span><br><span class="line">console.log(a.concat(b));//1, 2, 3, 2, 3, 4</span><br></pre></td></tr></table></figure><h2 id="创建新数组-切割数组-返回新数组"><a href="#创建新数组-切割数组-返回新数组" class="headerlink" title="创建新数组(切割数组 返回新数组)"></a>创建新数组(切割数组 返回新数组)</h2><blockquote><p>方法：slice()</p><p>描述：从已有的数组中返回选定的元素。</p><p>语法：array.slice(start, end)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3,4];</span><br><span class="line">console.log(a.slice(0,2));//[1, 2]</span><br></pre></td></tr></table></figure><h2 id="连接数组"><a href="#连接数组" class="headerlink" title="连接数组"></a>连接数组</h2><blockquote><p>方法：join()</p><p>描述：将所有的数组元素连接成一个字符串。元素是通过指定的分隔符进行分隔的。</p><p>语法：arrayObject.join(separator)</p><p>参数：可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3)</span><br><span class="line">arr[0] = &quot;George&quot;</span><br><span class="line">arr[1] = &quot;John&quot;</span><br><span class="line">arr[2] = &quot;Thomas&quot;</span><br><span class="line">console.log(arr.join());//George,John,Thomas</span><br><span class="line">console.log(arr.join(&quot;_&quot;));//George_John_Thomas</span><br></pre></td></tr></table></figure><h2 id="删除数组元素-最后一个元素-并返回-改变元素组"><a href="#删除数组元素-最后一个元素-并返回-改变元素组" class="headerlink" title="删除数组元素(最后一个元素) 并返回 改变元素组"></a>删除数组元素(最后一个元素) 并返回 改变元素组</h2><blockquote><p>方法：pop()</p><p>描述：删除并返回数组的<strong>最后一个</strong>元素。</p><p>语法：arrayObject.pop()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3)</span><br><span class="line">arr[0] = &quot;George&quot;</span><br><span class="line">arr[1] = &quot;John&quot;</span><br><span class="line">arr[2] = &quot;Thomas&quot;</span><br><span class="line">console.log(arr.pop());//Thomas</span><br><span class="line">console.log(arr);//&quot;George&quot;, &quot;John&quot;</span><br></pre></td></tr></table></figure><h3 id="删除数组第一个元素"><a href="#删除数组第一个元素" class="headerlink" title="删除数组第一个元素"></a>删除数组第一个元素</h3><blockquote><p>方法：shift()</p><p>描述：删除并返回数组的<strong>第一个</strong>元素。</p><p>语法：arrayObject.shift()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3)</span><br><span class="line">arr[0] = &quot;George&quot;</span><br><span class="line">arr[1] = &quot;John&quot;</span><br><span class="line">arr[2] = &quot;Thomas&quot;</span><br><span class="line">console.log(arr.shift());//George</span><br><span class="line">console.log(arr);//&quot;John&quot;, &quot;Thomas&quot;</span><br></pre></td></tr></table></figure><h2 id="添加数组元素-元素末尾添加"><a href="#添加数组元素-元素末尾添加" class="headerlink" title="添加数组元素 (元素末尾添加)"></a>添加数组元素 (元素末尾添加)</h2><blockquote><p>方法：push()</p><p>描述：可向数组的<strong>末尾添加</strong>一个或多个元素，并返回新的长度。</p><p>语法：arrayObject.push(arr1,arr2,….,arrx)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3)</span><br><span class="line">arr[0] = &quot;George&quot;</span><br><span class="line">arr[1] = &quot;John&quot;</span><br><span class="line">arr[2] = &quot;Thomas&quot;</span><br><span class="line">console.log(arr.length);//3</span><br><span class="line">console.log(arr.push(&quot;James&quot;));//4</span><br><span class="line">console.log(arr);//&quot;George&quot;, &quot;John&quot;, &quot;Thomas&quot;, &quot;James&quot;</span><br></pre></td></tr></table></figure><h3 id="在数组开头添加元素"><a href="#在数组开头添加元素" class="headerlink" title="在数组开头添加元素"></a>在数组开头添加元素</h3><blockquote><p>方法：unshift()</p><p>描述：可向数组的<strong>开头添加</strong>一个或多个元素，并返回新的长度。</p><p>语法：arrayObject.push(arr1,arr2,….,arrx)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr = new Array(3)</span><br><span class="line">arr[0] = &quot;George&quot;</span><br><span class="line">arr[1] = &quot;John&quot;</span><br><span class="line">arr[2] = &quot;Thomas&quot;</span><br><span class="line">console.log(arr.length);//3</span><br><span class="line">console.log(arr.unshift(&quot;William&quot;));//4</span><br><span class="line">console.log(arr);//&quot;William&quot;, &quot;George&quot;, &quot;John&quot;, &quot;Thomas&quot;</span><br></pre></td></tr></table></figure><h2 id="插入数组元素"><a href="#插入数组元素" class="headerlink" title="插入数组元素"></a>插入数组元素</h2><blockquote><p>方法：splice()</p><p>描述：向数组中添加/删除项目，然后<strong>返回被删除的项目。</strong></p><p>语法：arrayObject.splice(index,howmany,item1,…..,itemX)</p></blockquote><h4 id="插入数组元素："><a href="#插入数组元素：" class="headerlink" title="插入数组元素："></a>插入数组元素：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];</span><br><span class="line">//在位置2插入“新元素1”</span><br><span class="line">arr.splice(2,0,&quot;新元素1&quot;)</span><br><span class="line">console.log(arr);//&quot;A&quot;, &quot;B&quot;, &quot;新元素1&quot;, &quot;C&quot;, &quot;D&quot;</span><br></pre></td></tr></table></figure><h4 id="删除并插入数组元素："><a href="#删除并插入数组元素：" class="headerlink" title="删除并插入数组元素："></a>删除并插入数组元素：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];</span><br><span class="line">//从位置2开始，删除后面的1个元素，并插入“新元素1”、“新元素2”</span><br><span class="line">arr.splice(2,1,&quot;新元素1&quot;,&quot;新元素2&quot;);//&quot;C&quot;</span><br><span class="line">console.log(arr);//&quot;A&quot;, &quot;B&quot;, &quot;新元素1&quot;, &quot;新元素2&quot;, &quot;D&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javascript常用的原生数组方法&quot;&gt;&lt;a href=&quot;#javascript常用的原生数组方法&quot; class=&quot;headerlink&quot; title=&quot;javascript常用的原生数组方法&quot;&gt;&lt;/a&gt;javascript常用的原生数组方法&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript常用的原生数组方法" scheme="http://yoursite.com/tags/javascript%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8E%9F%E7%94%9F%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>移动端rem布局</title>
    <link href="http://yoursite.com/2018/05/26/%E7%A7%BB%E5%8A%A8%E7%AB%AFrem%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/05/26/移动端rem布局/</id>
    <published>2018-05-25T17:07:20.000Z</published>
    <updated>2018-05-25T17:15:59.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端Rem布局详解"><a href="#前端Rem布局详解" class="headerlink" title="前端Rem布局详解"></a>前端Rem布局详解</h1><p><img src="/images/01.jpg" alt=""></p><h2 id="px、em和rem之间的区别"><a href="#px、em和rem之间的区别" class="headerlink" title="px、em和rem之间的区别"></a>px、em和rem之间的区别</h2><blockquote><h3 id="px"><a href="#px" class="headerlink" title="px:"></a>px:</h3><p>像素(Pixel)，相对长度单位，基于显示器屏幕分辨率而言。</p><h3 id="em"><a href="#em" class="headerlink" title="em:"></a>em:</h3><p>相对长度单位，基于父元素大小而言</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem:"></a>rem:</h3><p>相对长度单位，基于html根元素大小而言。</p></blockquote><h2 id="em、rem实现移动端适配比较"><a href="#em、rem实现移动端适配比较" class="headerlink" title="em、rem实现移动端适配比较"></a>em、rem实现移动端适配比较</h2><blockquote><h3 id="em-1"><a href="#em-1" class="headerlink" title="em:"></a>em:</h3><p>基于父元素尺寸来定义自身属性而言，大大的增加了计算量。</p><h4 id="举例说明："><a href="#举例说明：" class="headerlink" title="举例说明："></a>举例说明：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; 默认浏览器字体大小为16px 即此时1em = 16px；</span><br><span class="line">&gt; body:&#123;font-size:&apos;62.5%&apos;&#125; =====&gt; 16 * 62.5% = 10；即当前body 1em = 10px；</span><br><span class="line">&gt; .parent&#123;</span><br><span class="line">&gt;     font-size: 80%; =====&gt; 当前 1em = 8px；</span><br><span class="line">&gt;     .children&#123;</span><br><span class="line">&gt;         font-size:2em; =====&gt; 16px继承自父元素.parent</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; 所以使用em实现移动端适配增加了计算量。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="rem-1"><a href="#rem-1" class="headerlink" title="rem:"></a>rem:</h3><p>基于html跟元素而言，由于rem是css中使用的单位，css是无法计算1rem等于多少，需要自己去定义。</p><p>简单理解rem是占页面横向分辨率的百分值，n个rem = 640px = 100%。则就可以事先定义rem的值，</p><p>html的font-size = deviceWidth / n 取到值，从而得到n 和1份rem的值，又因设定了在640宽度的分辨率下1rem的值R，从而可以计算psd图纸的量取尺寸W / R 得到W展占取的rem。又因deviceWidth随着屏幕分辨率的变化而随之改变（由下3可知），则rem的值也随之变化，就可以通过rem实现页面的适配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1、关于网易的算法：</span><br><span class="line">&gt; 假设psd图纸为640px 则 6.4rem = 640px = 100% ===&gt;即取font-size = 100px为参照 便于计算。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 则在640px的宽度下，200px换算为rem 200/100 * rem = 2rem;</span><br><span class="line">&gt; html的font-size = deviceWidth / 6.4 = 100px；</span><br><span class="line">&gt;</span><br><span class="line">&gt; 在320px宽度的页面上如果想得到320px占100%屏幕，即可计算 6.4rem = 100% = 320px =====&gt; 从而得到1rem = 50px；</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2、关于淘宝的算法：</span><br><span class="line">&gt; html的font-size取的参照为64px；</span><br><span class="line">&gt; 即 10rem = 640px = 100%；</span><br><span class="line">&gt; html的font-size = deviceWidth / 10；在640px宽度下，200px换算成rem即 200 / 64 * rem;</span><br><span class="line">&gt; 这样就需要我们进行一下计算才能得到最终的rem值，可以使用sass或者less设置下算法函数 从而来计算最重的rem值。</span><br><span class="line">&gt; 以sass为例：</span><br><span class="line">&gt; @function Px($px) &#123;</span><br><span class="line">&gt;     @return $px / 64 * rem;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; 则640px的psd: 以200px为例 换算成rem box&#123;Px(200)&#125;;</span><br><span class="line">&gt; 以less为例:</span><br><span class="line">&gt; @baseFont：64；</span><br><span class="line">&gt; .Px(@name,@px)&#123;</span><br><span class="line">&gt;     @&#123;name&#125;: @px / @baseFont * rem;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 综上所述：则需要动态的获取deviceWidth的值，即动态获取页面的font-size</span><br><span class="line">&gt; 1、document.documentElement.style.fontSize = document.documentElement.clientWidth / 6.4 + &apos;px&apos;</span><br><span class="line">&gt; 基于网易的做法 meta标签设置如下：</span><br><span class="line">&gt; &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt;</span><br><span class="line">&gt; 2、与网易相同，淘宝的做法</span><br><span class="line">&gt; 动态获取fontt-size：</span><br><span class="line">&gt; document.documentElement.style.fontSize = document.documentElement.clientWidth / 6.4 + &apos;px&apos;。</span><br><span class="line">&gt; 动态设置viewport的scale：</span><br><span class="line">&gt; var scale = 1 / devicePixelRatio;</span><br><span class="line">&gt; document.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;).setAttribute(&apos;content&apos;,&apos;initial-scale=&apos; + scale + &apos;, maximum-scale=&apos; + scale + &apos;, minimum-scale=&apos; + scale + &apos;, user-scalable=no&apos;);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3、在各屏幕宽度下的font-size计算</span><br><span class="line">&gt; deviceWidth = 320，font-size = 320 / 6.4 = 50px</span><br><span class="line">&gt; deviceWidth = 375，font-size = 375 / 6.4 = 58.59375px</span><br><span class="line">&gt; deviceWidth = 414，font-size = 414 / 6.4 = 64.6875px</span><br><span class="line">&gt; deviceWidth = 500，font-size = 500 / 6.4 = 78.125px </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端Rem布局详解&quot;&gt;&lt;a href=&quot;#前端Rem布局详解&quot; class=&quot;headerlink&quot; title=&quot;前端Rem布局详解&quot;&gt;&lt;/a&gt;前端Rem布局详解&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="rem自适应布局" scheme="http://yoursite.com/tags/rem%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript深入之原型到原型链</title>
    <link href="http://yoursite.com/2018/05/26/javascript%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2018/05/26/javascript深入之原型到原型链/</id>
    <published>2018-05-25T17:03:00.000Z</published>
    <updated>2018-05-26T10:03:17.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript深入之原型到原型链"><a href="#JavaScript深入之原型到原型链" class="headerlink" title="JavaScript深入之原型到原型链"></a>JavaScript深入之原型到原型链</h1><p><img src="/images/10.png" alt=""></p><h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><p>我们先使用构造函数创建一个对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person = new Person();</span><br><span class="line">person.name = &apos;Kevin&apos;;</span><br><span class="line">console.log(person.name) // Kevin</span><br></pre></td></tr></table></figure><p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p><h3 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h3><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 虽然写在注释里，但是你要注意：</span><br><span class="line">// prototype是函数才会有的属性</span><br><span class="line">Person.prototype.name = &apos;Kevin&apos;;</span><br><span class="line">var person1 = new Person();</span><br><span class="line">var person2 = new Person();</span><br><span class="line">console.log(person1.name) // Kevin</span><br><span class="line">console.log(person2.name) // Kevin</span><br></pre></td></tr></table></figure><p>那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的<strong>实例</strong>的原型，也就是这个例子中的 person1 和 person2 的原型。</p><p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：</p><p><img src="/images/13.png" alt=""></p><p>在这张图中我们用 Object.prototype 表示实例原型。</p><p>那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：</p><h2 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a><strong>proto</strong>属性</h2><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person = new Person();</span><br><span class="line">console.log(person.__proto__ === Person.prototype); // true</span><br></pre></td></tr></table></figure><p>于是我们更新下关系图：</p><p><img src="/images/14.png" alt=""></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(Person === Person.prototype.constructor); // true</span><br></pre></td></tr></table></figure><p>所以再更新下关系图：</p><p><img src="/images/15.png" alt=""></p><p>综上可以得出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person = new Person();</span><br><span class="line"></span><br><span class="line">console.log(person.__proto__ == Person.prototype) // true</span><br><span class="line">console.log(Person.prototype.constructor == Person) // true</span><br><span class="line">// 顺便学习一个ES5的方法,可以获得对象的原型</span><br><span class="line">console.log(Object.getPrototypeOf(person) === Person.prototype) // true</span><br></pre></td></tr></table></figure><h2 id="实例与原型的关系"><a href="#实例与原型的关系" class="headerlink" title="实例与原型的关系"></a>实例与原型的关系</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = &apos;Kevin&apos;;</span><br><span class="line"></span><br><span class="line">var person = new Person();</span><br><span class="line"></span><br><span class="line">person.name = &apos;Daisy&apos;;</span><br><span class="line">console.log(person.name) // Daisy</span><br><span class="line"></span><br><span class="line">delete person.name;</span><br><span class="line">console.log(person.name) // Kevin</span><br></pre></td></tr></table></figure><p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.<strong>proto</strong> ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h2 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h2><p>前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line">obj.name = &apos;Kevin&apos;</span><br><span class="line">console.log(obj.name) // Kevin</span><br></pre></td></tr></table></figure><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p><p><img src="/images/16.png" alt=""></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>那 Object.prototype 的原型呢？</p><p>null，我们可以打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.prototype.__proto__ === null) // true</span><br></pre></td></tr></table></figure><p>最后一张关系图也可以更新为：</p><p><img src="/images/17.png" alt=""></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>最后，补充三点大家可能不会注意的地方：</p><h3 id="constructor属性-1"><a href="#constructor属性-1" class="headerlink" title="constructor属性"></a>constructor属性</h3><p>首先是 constructor 属性，我们看个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person = new Person();</span><br><span class="line">console.log(person.constructor === Person); // true</span><br></pre></td></tr></table></figure><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.constructor === Person.prototype.constructor</span><br><span class="line">person.constructor === person.__proto__.constructor</span><br><span class="line">person.__proto__.constructor === Person.prototype.constructor</span><br><span class="line">Person.prototype.constructor === Person</span><br></pre></td></tr></table></figure><h3 id="proto-属性"><a href="#proto-属性" class="headerlink" title="_ proto _属性"></a>_ <em>proto</em> _属性</h3><p>其次是 <strong>proto</strong> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj._ proto _ 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p><h3 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h3><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript深入之原型到原型链&quot;&gt;&lt;a href=&quot;#JavaScript深入之原型到原型链&quot; class=&quot;headerlink&quot; title=&quot;JavaScript深入之原型到原型链&quot;&gt;&lt;/a&gt;JavaScript深入之原型到原型链&lt;/h1&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript原型链" scheme="http://yoursite.com/tags/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>闭包详解</title>
    <link href="http://yoursite.com/2018/05/26/%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/26/闭包详解/</id>
    <published>2018-05-25T17:00:52.000Z</published>
    <updated>2018-05-25T17:16:02.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包详解"><a href="#闭包详解" class="headerlink" title="闭包详解"></a>闭包详解</h1><p><img src="/images/09.png" alt=""></p><h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p>ECMAScript中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，即函数可以使用函数之外定义的变量。</p><p>总结：</p><ul><li>闭包是一个函数</li><li>闭包可以使用在它外面定义的变量</li><li>闭包存在定义该变量的作用域中</li></ul><h3 id="了解变量作用域"><a href="#了解变量作用域" class="headerlink" title="了解变量作用域"></a>了解变量作用域</h3><p>变量可分为全局变量和局部变量。全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var func = function() &#123;</span><br><span class="line">    var a = &apos;sam&apos;;</span><br><span class="line">    console.log(a)   // ===&gt; sam;</span><br><span class="line">&#125;</span><br><span class="line">func();</span><br><span class="line">console.log(a)  // ===&gt; 报错 Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure><h3 id="了解变量生存周期"><a href="#了解变量生存周期" class="headerlink" title="了解变量生存周期"></a>了解变量生存周期</h3><p>全局变量， 生命周期是永久的。局部变量，当定义该变量的函数调用结束时，变量就会被垃圾回收机制回收并销毁。再次调用该函数又会重新定义一个新变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var func = function()&#123;</span><br><span class="line">    var a = &apos;linxin&apos;;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>a为局部变量，当func调用完之后，a就会被销毁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var func = function()&#123;</span><br><span class="line">    var a = &apos;linxin&apos;;</span><br><span class="line">    var func1 = function()&#123;</span><br><span class="line">        a += &apos; a&apos;;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    return func1;</span><br><span class="line">&#125;</span><br><span class="line">var func2 = func();</span><br><span class="line">func2();                    // linxin a</span><br><span class="line">func2();                    // linxin a a</span><br><span class="line">func2();                    // linxin a a a</span><br></pre></td></tr></table></figure><p>可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 ‘linxin a’，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。</p><p>通过func了解闭包：</p><ul><li>闭包是一个函数，比如上面的 func1 函数</li><li>闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a</li><li>包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。</li></ul><p>进一步了解闭包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;, 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。</p><p>在func函数里面的func1函数，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">    (function (i) &#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            console.log(i)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。</p><p>然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">    var test = document.getElementById(&apos;test&apos;);</span><br><span class="line">    test.onclick = function () &#123;</span><br><span class="line">        console.log(&apos;hello world&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">    var test = document.getElementById(&apos;test&apos;);</span><br><span class="line">    test.onclick = function () &#123;</span><br><span class="line">        console.log(&apos;hello world&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    test = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">    var test = document.getElementById(&apos;test&apos;);</span><br><span class="line">    test.onclick = funcTest;</span><br><span class="line">&#125;</span><br><span class="line">function funcTest()&#123;</span><br><span class="line">    console.log(&apos;hello world&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><blockquote><p>代码片段一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">　　var name = &quot;The Window&quot;;</span><br><span class="line"></span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return this.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure><p>代码一打印： ‘The window’,因为此时的this指向的是window对象，返回的是全局变量name；</p><blockquote><p>代码片段二</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">　　var name = &quot;The Window&quot;;</span><br><span class="line"></span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line"></span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　var that = this;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return that.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　alert(object.getNameFunc()());</span><br></pre></td></tr></table></figure><p>代码二打印：’My Object’,函数内部改变this指向了getNameFunc函数，返回的是this指向的函数内部的局部变量name。由于链式作用域链规则，函数会自内向外寻找变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;闭包详解&quot;&gt;&lt;a href=&quot;#闭包详解&quot; class=&quot;headerlink&quot; title=&quot;闭包详解&quot;&gt;&lt;/a&gt;闭包详解&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/09.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是闭包？&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript闭包" scheme="http://yoursite.com/tags/javascript%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>sass、less语法</title>
    <link href="http://yoursite.com/2018/05/26/sass%E3%80%81less%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/26/sass、less语法/</id>
    <published>2018-05-25T16:58:21.000Z</published>
    <updated>2018-05-25T17:15:46.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sass和less语法"><a href="#sass和less语法" class="headerlink" title="sass和less语法"></a>sass和less语法</h1><p><img src="/images/11.png" alt=""></p><h2 id="sass语法："><a href="#sass语法：" class="headerlink" title="sass语法："></a>sass语法：</h2><p><code>父选择器</code></p><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，或者当 body 元素有某个 classname<br>时，可以用 &amp; 代表嵌套规则外层的父选择器    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#main &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    &amp;-sidebar&#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#main &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    #main-sidebar &#123;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>嵌套属性</code></p><p>有些 CSS 属性遵循相同的命名空间 (namespace)，比如 font-family,<br>font-size, font-weight 都以 font 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.funck &#123;</span><br><span class="line">    font: &#123;</span><br><span class="line">        family: fantasy;</span><br><span class="line">        size: 30rem;</span><br><span class="line">        weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.funck&#123;</span><br><span class="line">    font-family: fantasy;</span><br><span class="line">    font-size: 30rem;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>变量</code></p><p>SassScript 最普遍的用法就是变量，变量以美元符号开头，赋值方法与 CSS 属性的写法一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$width: 5rem;</span><br><span class="line"></span><br><span class="line">/** 直接使用*/</span><br><span class="line">#main&#123;</span><br><span class="line">    width: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 !global声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#main&#123;</span><br><span class="line">    $width: 5rem !global;</span><br><span class="line">    width: $width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#sidebar&#123;</span><br><span class="line">    width: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#main&#123; width: 5rem; &#125;</span><br><span class="line">#sidebar&#123; width: 5rem; &#125;</span><br></pre></td></tr></table></figure><p><code>函数命名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** 定义一个函数*/</span><br><span class="line">@function Px($px) &#123;</span><br><span class="line">    @return $px / 64 * rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#main&#123;</span><br><span class="line">    width: Px(200);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多值变量</p></blockquote><p>多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。</p><p><code>list</code></p><p>list数据可通过空格，逗号或小括号分隔多个值，可用 <code>nth($var,$index)</code>取值。关于list数据操作还有很多其他函数如 <code>length($list)</code>，<code>join($list1,$list2,[$separator])</code>， <code>append($list,$value,[$separator])</code>等，具体可参考 <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="noopener">sass Functions</a>（搜索 <code>List Functions</code>即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//-------------------------------</span><br><span class="line">$linkColor:         #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</span><br><span class="line">a&#123;</span><br><span class="line">  color:nth($linkColor,1);</span><br><span class="line"></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    color:nth($linkColor,2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line">@each $header, $size in $headings &#123;</span><br><span class="line">  #&#123;$header&#125; &#123;</span><br><span class="line">    font-size: $size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$header ===&gt; h1/h2/h3,$size ===&gt; 2em/1.5em/1.2em</span><br></pre></td></tr></table></figure><p><code>属性嵌套</code></p><p>所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。</p><p>background同。background-images,background-size,background-position…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    left: &#123;</span><br><span class="line">      width: 4px;</span><br><span class="line">      color: #888;</span><br><span class="line">    &#125;</span><br><span class="line">    right: &#123;</span><br><span class="line">      width: 2px;</span><br><span class="line">      color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@at-root应用与@keyframe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.demo&#123;</span><br><span class="line">    ...</span><br><span class="line">    animation: motion 3s infinite;</span><br><span class="line">    @at-root&#123;</span><br><span class="line">        @keyframes motion&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.demo&#123;</span><br><span class="line">    ...</span><br><span class="line">    animation: motion 3s infinite;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes motion&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>混合（mixin）：</p></blockquote><p><code>无参数mixin</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">@mixin center-block &#123;</span><br><span class="line">    margin-left:auto;</span><br><span class="line">    margin-right:auto;</span><br><span class="line">&#125;</span><br><span class="line">.demo&#123;</span><br><span class="line">    @include center-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>多个参数（mixin）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------   </span><br><span class="line">@mixin horizontal-line($border:1px dashed #ccc, $padding:10px)&#123;</span><br><span class="line">    border-bottom:$border;</span><br><span class="line">    padding-top:$padding;</span><br><span class="line">    padding-bottom:$padding;  </span><br><span class="line">&#125;</span><br><span class="line">.imgtext-h li&#123;</span><br><span class="line">    @include horizontal-line(1px solid #ccc);</span><br><span class="line">&#125;</span><br><span class="line">.imgtext-h--product li&#123;</span><br><span class="line">    @include horizontal-line($padding:15px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>多组值参数（mixin）</code></p><p>如果一个参数可以有多组值，如box-shadow、transition等，那么参数则需要在变量后加三个点表示，如 <code>$variables...</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------   </span><br><span class="line">//box-shadow可以有多组值，所以在变量参数后面添加...</span><br><span class="line">@mixin box-shadow($shadow...) &#123;</span><br><span class="line">  -webkit-box-shadow:$shadow;</span><br><span class="line">  box-shadow:$shadow;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">  border:1px solid #ccc;</span><br><span class="line">  @include box-shadow(0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@content和继承以及占位选择器 <code>%</code>比较</p></blockquote><p><code>@mixin</code>通过 <code>@include</code>调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用 <code>@mixin</code>，而非传递参数类的使用继承</p><p><code>@content</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> //sass style</span><br><span class="line">//-------------------------------                     </span><br><span class="line">@mixin max-screen($res)&#123;</span><br><span class="line">  @media only screen and ( max-width: $res )</span><br><span class="line">  &#123;</span><br><span class="line">    @content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@include max-screen(480px) &#123;</span><br><span class="line">  body &#123; color: red &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">@media only screen and (max-width: 480px) &#123;</span><br><span class="line">  body &#123; color: red &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>继承</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">h1&#123;</span><br><span class="line">  border: 4px solid #ff9aa9;</span><br><span class="line">&#125;</span><br><span class="line">.speaker&#123;</span><br><span class="line">  @extend h1;</span><br><span class="line">  border-width: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">h1,.speaker&#123;</span><br><span class="line">  border: 4px solid #ff9aa9;</span><br><span class="line">&#125;</span><br><span class="line">.speaker&#123;</span><br><span class="line">  border-width: 2px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>占位选择器%</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">%ir&#123;</span><br><span class="line">  color: transparent;</span><br><span class="line">  text-shadow: none;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  border: 0;</span><br><span class="line">&#125;</span><br><span class="line">#header&#123;</span><br><span class="line">  h1&#123;</span><br><span class="line">    @extend %ir;</span><br><span class="line">    width:300px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.ir&#123;</span><br><span class="line">  @extend %ir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">#header h1,</span><br><span class="line">.ir&#123;</span><br><span class="line">  color: transparent;</span><br><span class="line">  text-shadow: none;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  border: 0;</span><br><span class="line">&#125;</span><br><span class="line">#header h1&#123;</span><br><span class="line">  width:300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>each循环</p></blockquote><p>语法为： <code>@each $var in &lt;list or map&gt;</code>。其中 <code>$var</code>表示变量，而list和map表示list类型数据和map类型数据。sass 3.3.0新加入了多字段循环和map数据循环。</p><p><code>单个字段list数据循环</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$animal-list: puma, sea-slug, egret, salamander;</span><br><span class="line">@each $animal in $animal-list &#123;</span><br><span class="line">  .#&#123;$animal&#125;-icon &#123;</span><br><span class="line">    background-image: url(&apos;/images/#&#123;$animal&#125;.png&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>多个字段list数据循环</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);</span><br><span class="line">@each $animal, $color, $cursor in $animal-data &#123;</span><br><span class="line">  .#&#123;$animal&#125;-icon &#123;</span><br><span class="line">    background-image: url(&apos;/images/#&#123;$animal&#125;.png&apos;);</span><br><span class="line">    border: 2px solid $color;</span><br><span class="line">    cursor: $cursor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.puma-icon &#123;</span><br><span class="line">  background-image: url(&apos;/images/puma.png&apos;);</span><br><span class="line">  border: 2px solid black;</span><br><span class="line">  cursor: default; </span><br><span class="line">&#125;</span><br><span class="line">.sea-slug-icon &#123;</span><br><span class="line">  background-image: url(&apos;/images/sea-slug.png&apos;);</span><br><span class="line">  border: 2px solid blue;</span><br><span class="line">  cursor: pointer; </span><br><span class="line">&#125;</span><br><span class="line">.egret-icon &#123;</span><br><span class="line">  background-image: url(&apos;/images/egret.png&apos;);</span><br><span class="line">  border: 2px solid white;</span><br><span class="line">  cursor: move; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sass和less语法&quot;&gt;&lt;a href=&quot;#sass和less语法&quot; class=&quot;headerlink&quot; title=&quot;sass和less语法&quot;&gt;&lt;/a&gt;sass和less语法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/11.png&quot; alt=&quot;&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="sass、less语法" scheme="http://yoursite.com/tags/sass%E3%80%81less%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>js中的事件绑定、事件捕获、和事件冒泡、事件委托详解</title>
    <link href="http://yoursite.com/2018/05/26/js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E3%80%81%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E3%80%81%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E3%80%81%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/26/js中的事件绑定、事件捕获、和事件冒泡、事件委托详解/</id>
    <published>2018-05-25T16:55:12.000Z</published>
    <updated>2018-05-25T17:15:45.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js中的事件绑定、事件捕获、和事件冒泡、事件委托详解"><a href="#js中的事件绑定、事件捕获、和事件冒泡、事件委托详解" class="headerlink" title="js中的事件绑定、事件捕获、和事件冒泡、事件委托详解"></a>js中的事件绑定、事件捕获、和事件冒泡、事件委托详解</h1><p><img src="/images/12.jpg" alt=""></p><h2 id="事件冒泡和事件捕获"><a href="#事件冒泡和事件捕获" class="headerlink" title="事件冒泡和事件捕获"></a>事件冒泡和事件捕获</h2><p>代表了两种主流浏览器Netscape和IE对事件的不同处理方法。</p><p>Netscape定义了一种事件捕获的方法，即事件首先发生在DOM树的最高层对象（document）上，然后往最里层dom元素传播；IE定义与之想反，定义为事件冒泡，认为最里层元素最先触发并初级向上触发。</p><p><img src="/images/02.png" alt=""></p><p>即左边代表的Netscape的处理方法，右边代表IE的处理方法。</p><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>事件冒泡就是事件触发时，会从目标DOM元素向上传播，直到文档根节点，一般情况下，会是如下形式传播：</p><p>targetDOM → parentNode → … → body → document → window</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* html*/</span><br><span class="line">&lt;button id=&apos;click&apos;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">/** js*/</span><br><span class="line">document.getElementById(&apos;click&apos;).addEvevtListener(&apos;click&apos;.function(evt) &#123;</span><br><span class="line">    alert(&apos;button click&apos;)</span><br><span class="line">    evt.stopPropagation() //该方法组织事件冒泡，即body的click方法将不会被触发。</span><br><span class="line">&#125;)</span><br><span class="line">document.body.addEventListener(&apos;click&apos;,function() &#123;</span><br><span class="line">    alert(&apos;body click&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>需要注意的是：</code></p><p> 不是所有的事件都能冒泡，如：blur、focus、load、unload都不能</p><p>不同的浏览器，阻止冒泡的方式也不一样，在w3c标准中，通过<code>event.stopPropagation()</code>完成， 在IE中则是通过自身的<code>event.cancelBubble=true</code>来完成。</p><h4 id="阻止事件冒泡的方法："><a href="#阻止事件冒泡的方法：" class="headerlink" title="阻止事件冒泡的方法："></a>阻止事件冒泡的方法：</h4><p><code>event.stopPropagation()=====w3c的方法</code></p><p>阻止事件冒泡，不会阻止默认事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&apos;box&apos;&gt;&lt;a href=&apos;www.baodu.com&apos; target=&apos;_blan&apos;&gt;&lt;/a&gt;</span><br><span class="line">//stopPropagation()方法阻止了事件冒泡，即a点击事件 父元素box将不会触发，页面跳转（默认事件 ）</span><br><span class="line">$(&apos;.box a&apos;).click(function(evt) &#123;</span><br><span class="line">    evt.stopPropagation()</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;.box&apos;).click(function() &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>return false</code></p><p>同时阻止事件冒泡和默认事件（jquery中）</p><p>只阻止默认行为（javascript）</p><p><code>e.cancelBubble = true =====IE使用方法</code></p><h4 id="阻止事件冒泡的兼容写法"><a href="#阻止事件冒泡的兼容写法" class="headerlink" title="阻止事件冒泡的兼容写法"></a>阻止事件冒泡的兼容写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function stopPropagation(e) &#123;</span><br><span class="line">    var e = e || window.event;</span><br><span class="line">    if ( e &amp;&amp; e.stopPropagation )&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e.cancelBubble = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻止浏览器的默认行为："><a href="#阻止浏览器的默认行为：" class="headerlink" title="阻止浏览器的默认行为："></a>阻止浏览器的默认行为：</h4><p><code>w3c处理方法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()</span><br></pre></td></tr></table></figure><p><code>IE浏览器处理方法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.returnValue = false</span><br></pre></td></tr></table></figure><h4 id="阻止浏览器默认行为兼容写法"><a href="#阻止浏览器默认行为兼容写法" class="headerlink" title="阻止浏览器默认行为兼容写法"></a>阻止浏览器默认行为兼容写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function stopDefault(e) &#123;</span><br><span class="line">    var e = e || window.event;</span><br><span class="line">    if (e &amp;&amp; e.preventDefault)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>利用事件冒泡行为，为特定的dom元素添加事件，尽可能的减少事件行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/** html*/</span><br><span class="line">&lt;ul id=&quot;myLinks&quot;&gt;  </span><br><span class="line">    &lt;li id=&quot;goSomewhere&quot;&gt;Do something&lt;/li&gt;  </span><br><span class="line">    &lt;li id=&quot;doSomething&quot;&gt;Do something&lt;/li&gt;  </span><br><span class="line">    &lt;li id=&quot;sayHi&quot;&gt;Say Hi&lt;/li&gt;  </span><br><span class="line">&lt;/ul&gt; </span><br><span class="line"></span><br><span class="line">/** js*/</span><br><span class="line">    function eventDelegate (parentSelector, targetSelector, events, foo) &#123;</span><br><span class="line">      // 触发执行的函数</span><br><span class="line">      function triFunction (e) &#123;</span><br><span class="line">        // 兼容性处理</span><br><span class="line">        var event = e || window.event;</span><br><span class="line">        // 获取到目标阶段指向的元素</span><br><span class="line">        var target = event.target || event.srcElement;</span><br><span class="line">        // 获取到代理事件的函数</span><br><span class="line">        var currentTarget = event.currentTarget;</span><br><span class="line">        // 处理 matches 的兼容性</span><br><span class="line">        if (!Element.prototype.matches) &#123;</span><br><span class="line">          Element.prototype.matches =</span><br><span class="line">            Element.prototype.matchesSelector ||</span><br><span class="line">            Element.prototype.mozMatchesSelector ||</span><br><span class="line">            Element.prototype.msMatchesSelector ||</span><br><span class="line">            Element.prototype.oMatchesSelector ||</span><br><span class="line">            Element.prototype.webkitMatchesSelector ||</span><br><span class="line">            function(s) &#123;</span><br><span class="line">              var matches = (this.document || this.ownerDocument).querySelectorAll(s),</span><br><span class="line">                i = matches.length;</span><br><span class="line">              while (--i &gt;= 0 &amp;&amp; matches.item(i) !== this) &#123;&#125;</span><br><span class="line">              return i &gt; -1;            </span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;                                                                                                                                                                           </span><br><span class="line">        // 遍历外层并且匹配</span><br><span class="line">        while (target !== currentTarget) &#123;</span><br><span class="line">          // 判断是否匹配到我们所需要的元素上</span><br><span class="line">          if (target.matches(targetSelector)) &#123;</span><br><span class="line">            var sTarget = target;</span><br><span class="line">            // 执行绑定的函数，注意 this</span><br><span class="line">            foo.call(sTarget, Array.prototype.slice.call(arguments))</span><br><span class="line">          &#125;</span><br><span class="line">          target = target.parentNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 如果有多个事件的话需要全部一一绑定事件</span><br><span class="line">      events.split(&apos;.&apos;).forEach(function (evt) &#123;</span><br><span class="line">        // 多个父层元素的话也需要一一绑定</span><br><span class="line">        Array.prototype.slice.call(document.querySelectorAll(parentSelector)).forEach(function ($p) &#123;</span><br><span class="line">          $p.addEventListener(evt, triFunction);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">/** 处理方法*/</span><br><span class="line">eventDelegate(&apos;#list&apos;, &apos;li&apos;, &apos;click&apos;, function () &#123; console.log(this); &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js中的事件绑定、事件捕获、和事件冒泡、事件委托详解&quot;&gt;&lt;a href=&quot;#js中的事件绑定、事件捕获、和事件冒泡、事件委托详解&quot; class=&quot;headerlink&quot; title=&quot;js中的事件绑定、事件捕获、和事件冒泡、事件委托详解&quot;&gt;&lt;/a&gt;js中的事件绑定
      
    
    </summary>
    
      <category term="前端事件处理" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端跨域问题总结</title>
    <link href="http://yoursite.com/2018/05/24/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/24/前端跨域问题总结/</id>
    <published>2018-05-24T10:17:41.000Z</published>
    <updated>2018-05-25T17:15:47.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端跨域问题总结"><a href="#前端跨域问题总结" class="headerlink" title="前端跨域问题总结"></a>前端跨域问题总结</h1><p><img src="/images/03.png" alt=""></p><h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域是指一个域下的文档或者脚本试图去请求另一个域下的资源，这里跨域为广义的 导致跨域的原因是因为浏览器的同源策略限制造成的的。</p><h4 id="广义的跨域："><a href="#广义的跨域：" class="headerlink" title="广义的跨域："></a>广义的跨域：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、资源跳转：A链接、重定向、表单提交。</span><br><span class="line">2、资源嵌入：&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;等dom标签...</span><br><span class="line">3、脚本请求：js发起的ajax请求、dom和js对象的跨域操作等...</span><br></pre></td></tr></table></figure><h3 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h3><p>同源策略/SOP（Same origin policy）是一种约定，是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><h4 id="同源策略限制以下几种行为："><a href="#同源策略限制以下几种行为：" class="headerlink" title="同源策略限制以下几种行为："></a>同源策略限制以下几种行为：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、 Cookie、LocalStorage 和 IndexDB 无法读取</span><br><span class="line">2、 DOM 和 Js对象无法获得</span><br><span class="line">3、 AJAX 请求不能发送</span><br></pre></td></tr></table></figure><h3 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">URL                                      说明                    是否允许通信</span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://www.domain.com/b.js         同一域名，不同文件或路径           允许</span><br><span class="line">http://www.domain.com/lab/c.js</span><br><span class="line"></span><br><span class="line">http://www.domain.com:8000/a.js</span><br><span class="line">http://www.domain.com/b.js         同一域名，不同端口                不允许</span><br><span class="line"> </span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">https://www.domain.com/b.js        同一域名，不同协议                不允许</span><br><span class="line"> </span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://192.168.4.12/b.js           域名和域名对应相同ip              不允许</span><br><span class="line"> </span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://x.domain.com/b.js           主域相同，子域不同                不允许</span><br><span class="line">http://domain.com/c.js</span><br><span class="line"> </span><br><span class="line">http://www.domain1.com/a.js</span><br><span class="line">http://www.domain2.com/b.js        不同域名                         不允许</span><br></pre></td></tr></table></figure><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、 通过jsonp跨域</span><br><span class="line">2、 document.domain + iframe跨域</span><br><span class="line"></span><br><span class="line">3、 location.hash + iframe</span><br><span class="line">4、 window.name + iframe跨域</span><br><span class="line">5、 postMessage跨域</span><br><span class="line">6、 跨域资源共享（CORS）</span><br><span class="line">7、 nginx代理跨域</span><br><span class="line">8、 nodejs中间件代理跨域</span><br><span class="line">9、 WebSocket协议跨域</span><br></pre></td></tr></table></figure><h4 id="一、通过jsonp跨域"><a href="#一、通过jsonp跨域" class="headerlink" title="一、通过jsonp跨域"></a>一、通过jsonp跨域</h4><p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。    </p><blockquote><h4 id="jsonp缺点：只能实现get一种请求"><a href="#jsonp缺点：只能实现get一种请求" class="headerlink" title="jsonp缺点：只能实现get一种请求"></a>jsonp缺点：只能实现get一种请求</h4></blockquote><p>1、原生实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   var script = document.createElement(&apos;script&apos;);</span><br><span class="line">   script.type = &apos;text/javascript&apos;;</span><br><span class="line"></span><br><span class="line">   // 传参并指定回调执行函数为onBack</span><br><span class="line">   script.src = &apos;http://www.domain2.com:8080/login?user=admin&amp;callback=onBack&apos;;</span><br><span class="line">   document.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">   // 回调执行函数</span><br><span class="line">   function onBack(res) &#123;</span><br><span class="line">       alert(JSON.stringify(res));</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、jquery ajax实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &apos;http://www.domain2.com:8080/login&apos;,</span><br><span class="line">    type: &apos;get&apos;,</span><br><span class="line">    dataType: &apos;jsonp&apos;,  // 请求方式为jsonp</span><br><span class="line">    jsonpCallback: &quot;onBack&quot;,    // 自定义回调函数名</span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3、vue.js 实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$http.jsonp(&apos;http://www.domain2.com:8080/login&apos;, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: &apos;onBack&apos;</span><br><span class="line">&#125;).then((res) =&gt; &#123;</span><br><span class="line">    console.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端跨域问题总结&quot;&gt;&lt;a href=&quot;#前端跨域问题总结&quot; class=&quot;headerlink&quot; title=&quot;前端跨域问题总结&quot;&gt;&lt;/a&gt;前端跨域问题总结&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript跨域" scheme="http://yoursite.com/tags/javascript%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
</feed>
